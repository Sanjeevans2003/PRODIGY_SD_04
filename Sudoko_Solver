def find_empty_location(grid, l):
   Returns:
      True if an empty location is found, False otherwise.
  
  for row in range(9):
    for col in range(9):
      if grid[row][col] == 0:
        l[0] = row
        l[1] = col
        return True
  return False

def used_in_row(grid, row, num):
  """Checks if a number is already used in a specific row.

  Args:
      grid: A 2D list representing the Sudoku grid.
      row: The row index to check.
      num: The number to search for.

  Returns:
      True if the number is found in the row, False otherwise.
  """
  for i in range(9):
    if grid[row][i] == num:
      return True
  return False

def used_in_col(grid, col, num):
  """Checks if a number is already used in a specific column.

  Args:
      grid: A 2D list representing the Sudoku grid.
      col: The column index to check.
      num: The number to search for.

  Returns:
      True if the number is found in the column, False otherwise.
  """
  for i in range(9):
    if grid[i][col] == num:
      return True
  return False

def used_in_box(grid, row, col, num):
  """Checks if a number is already used in a specific 3x3 sub-box.

  Args:
      grid: A 2D list representing the Sudoku grid.
      row: The row index of the top-left cell in the sub-box.
      col: The column index of the top-left cell in the sub-box.
      num: The number to search for.

  Returns:
      True if the number is found in the sub-box, False otherwise.
  """
  for i in range(3):
    for j in range(3):
      if grid[i + row][j + col] == num:
        return True
  return False

def is_safe_location(grid, row, col, num):
  """Checks if it's safe to place a number in a specific cell.

  Args:
      grid: A 2D list representing the Sudoku grid.
      row: The row index of the cell.
      col: The column index of the cell.
      num: The number to place.

  Returns:
      True if it's safe to place the number, False otherwise.
  """
  return not used_in_row(grid, row, num) and not used_in_col(grid, col, num) and not used_in_box(grid, row - row % 3, col - col % 3, num)

def solve_sudoku(grid):
  """Solves the Sudoku puzzle using backtracking.

  Args:
      grid: A 2D list representing the Sudoku grid.

  Returns:
      True if the puzzle is solved, False otherwise.
  """
  l = [0, 0]
  if not find_empty_location(grid, l):
    return True
  row, col = l[0], l[1]
  for num in range(1, 10):
    if is_safe_location(grid, row, col, num):
      grid[row][col] = num
      if solve_sudoku(grid):
        return True
      grid[row][col] = 0
  return False

def print_grid(grid):
  """Prints the Sudoku grid in a formatted way.

  Args:
      grid: A 2D list representing the Sudoku grid.
  """
  for row in grid:
    print(" ".join(str(cell) for cell in row))

# Example Sudoku puzzle
grid = [
  [5, 3, 0, 0, 7, 0, 0, 0, 0],
  [6, 0, 0, 1, 9, 5, 0, 0, 0],
  
